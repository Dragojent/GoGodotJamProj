[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 line_color : hint_color = vec4(1);
uniform float line_thickness : hint_range(0, 10) = 1.0;
uniform bool active = false;

void fragment() {
	if (!active) {
		COLOR = texture(TEXTURE, UV);
	}
	else {
		vec4 color = texture(TEXTURE, UV);
		
    	vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
		float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
		outline += texture(TEXTURE, UV + vec2(0, size.y)).a;
		outline += texture(TEXTURE, UV + vec2(size.x, 0)).a;
		outline += texture(TEXTURE, UV + vec2(0, -size.y)).a;
		outline += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
		outline += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
		outline += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
		outline += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
		outline = min(outline, 1.0);


		COLOR = mix(color, line_color, outline - color.a);
	}
}"

[resource]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/line_color = Color( 0.768627, 0.882353, 0.737255, 1 )
shader_param/line_thickness = 10.0
shader_param/active = false
